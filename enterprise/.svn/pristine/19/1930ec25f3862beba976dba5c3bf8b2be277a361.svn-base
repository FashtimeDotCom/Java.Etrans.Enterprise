//--------------------------------- 定义常量 -------------------------------- //
var CONST = {}; // 常量对象

// 树相关常量
CONST.ROOT_NODE_ID = 0; // 默认根节点ID, 该节点在初始化数据库时导入，不可删除，不显示

// 操作类型
CONST.OPERATE_TYPE = {};
CONST.OPERATE_TYPE.INSERT = "insert"; // 插入
CONST.OPERATE_TYPE.INSERT.TOP = "insertTop"; // 顶级菜单插入
CONST.OPERATE_TYPE.MODIFY = "modify"; // 修改

// 菜单类型
CONST.MENU_TYPE = {};
CONST.MENU_TYPE.MAIN_FUNCTION = "mainFunction"; // 主功能菜单
CONST.MENU_TYPE.CHILD_FUNCTION = "childFunction"; // 其他子菜单
// --------------------------------- 定义变量 -------------------------------- //
var functionTree = null; // 树对象
var elementIds = [ "functionName", "functionCode", "functionImg",
		"functionType", "assemblyName", "ordering", "state", "remark",
		"assemblyBut" ]; // 所有表单元素的ID数组
var showElementIds = [ "functionName", "functionCode", "functionImg",
		"functionType", "ordering", "state", "remark", "parentFuncId" ]; // 显示时需要设置的元素ID数组
var functionNode = null; // 当前选中的节点对象
var menuType = null; // 当前选中的菜单类型. 选中主功能菜单时为"mainFunction",
var parentWorkId;						// 选中其他功能菜单时为"childFunction"
var operateType = null; // 当前操作类型. 插入状态时为"insert", 修改状态时为"modify"
var parentNodeId = CONST.ROOT_NODE_ID; // 父节点(功能)ID
var moduleId = CONST.ROOT_NODE_ID; // 模块ID(顶级功能ID)
$(function(){
	$("#addVehicleBtn").click(addVehicleGrouopHandler);
	$("#updateVehicleBtn").click(updateVehicleGrouopHandler);
	$("#deleteBut").click(delVehicleGroupHandler);
	showVehicle();
	/**
	 * 查询
	 */
	$("#searchBtn_List").click(searchVehicle);
});
/**
 * 用户查询
 */
function searchVehicle()
{
	var name = $("#vehicleRegisterId").val();
	//查询参数
	var params = 
	[{
		name : 'RegistrationNO',
		value : name
	}];	
	gridReload(params);
}
function updateVehicleGrouopHandler(){
	  var element = document.getElementsByName("updateSelectVehicle")[0];
	    var vehicles = "";
	    if (element.options != null) {
	        for (i = 0; i < element.options.length; i++) {
	        	vehicles = vehicles + element.options[i].value + ",";
	        }
	    }
		$.ajax({
			type:"POST",
			url:"sys/updateVehicleGroup.action",
			data:{
				"vehicleGroupBean.id":functionNode.id,
				"vehicleGroupBean.name":$("#updateVehicleName").val(),
				"vehicles":vehicles
			},
			dataType:"JSON",
			success:function(data){
				if(data){
					showWarning("修改成功!");
					$('#updateGroupForm').dialog('close');
					refreshTree();
				}else{
					showWarning("修改失败!");
				}
			},
			error:function(data){
				showError();
			}
			
		});	
}
function delVehicleGroupHandler(){
	if (confirm("请在删除之前 [确认] 节点 [没被引用], 否则可能导致删除失败!\n确定删除将 [不可恢复], 是否确定?")) {
		var deleteUrl = "sys/delVehicleGroup.action";
		var deleteParams = {
			"id" : functionNode.id
		};
		$.post(deleteUrl, deleteParams, function(data) {
			if (data == "true") {
				showWarning("删除成功!");
				refreshTree();
			}else if(data == "false"){
				showWarning("删除失败!");
			}else{
				showWarning(data);
			}
		});
	}
}
function isDigit(){ 
	if($("#vehicleName").val()!=null || $("#vehicleName").val()!=""){
		$("#vehicleNamespan").closeMessage();
	}
	
} 

/**
 * 新增车辆分组提交
 */
function addVehicleGrouopHandler(){
		if($("#vehicleName").val()==null || $("#vehicleName").val()==""){
			//alert("车组名不能为空！");
			 $("#vehicleNamespan").showMessage({
					type : "error",
					closeable : false, 
					text : "名称不能为空！"});
			    return;
		}
	    var element = document.getElementsByName("selectVehicle")[0];
	    var vehicles = "";
	    if (element.options != null) {
	        for (i = 0; i < element.options.length; i++) {
	        	vehicles = vehicles + element.options[i].value + ",";
	        }
	    }
		$.ajax({
			type:"POST",
			url:"sys/addVehicleGroup.action",
			data:{
				"vehicleGroupBean.fullId":null,
				"vehicleGroupBean.parentGroupId":functionNode.id,
				"vehicleGroupBean.isLeaf":1,
				"vehicleGroupBean.level":2,
				"vehicleGroupBean.name":$("#vehicleName").val(),
				"vehicleGroupBean.workUnitId":functionNode.workId,
				"vehicleGroupBean.authorizedGroupId":0,
				"vehicleGroupBean.kind":4,
				"vehicleGroupBean.isSourceVisible":0,
				"vehicleGroupBean.privilegeFlag":0,
				"vehicles":vehicles
			},
			dataType:"JSON",
			success:function(data){
				if(data){
					showWarning("新增成功!");
					$('#addGroupForm').dialog('close');
					refreshTree();
				}else{
					showWarning("新增失败!");
				}
			},
			error:function(data){
				showError();
			}
			
		});
}

/**
 * 刷新组织树
 */
function refreshTree() {
	initTree();
}
/**
 * 初始化车辆组树形结构
 */
function initTree() {
	// 区域树
	$('#vehicleGroupTree').tree({
		url : "sys/getVehicleGoupTreeWorkUnitList.action",
		onClick : function(node){
			try{
				if(node.attributes!=null && node.attributes[0].workId!=null){
					if(node.attributes[0].workId != 'undefined' && node.attributes[0].workId!=null){	
						parentWorkId = node.attributes[0].workId;
					}
				}	
			}catch(e){				
			}
			// 保存节点类型、和父节点ID
			functionNode = {
				id : node.id.split("|")[1],
				nodeName:node.text,
				kind:node.attributes.kind,
				workId:node.attributes.workId,
				workUnitName:node.attributes.workUnitName
			}; 
			parentNodeId = node.id.split("|")[1];
			// 选中节点时设置按钮状态
			if(functionNode.kind==2){
				setDisabled( [ "insertBut","cancelBut" ], false);
				setDisabled( [ "modifyBut","deleteBut" ], true);
			}else if(functionNode.kind==4){
				setDisabled( [ "insertBut","modifyBut","deleteBut","cancelBut" ], false);
			}else{
				setDisabled( [ "insertBut","modifyBut","deleteBut","cancelBut" ], true);
			}
			// 除了非授权(非授权下级节点)节点外都显示车辆信息
			//if(functionNode.kind!=1){
				toSearch(functionNode.kind);
				setValueToVehicleInfo();
			//}
		}
	});
}

function setValueToVehicleInfo(){
	$("#vName").val(functionNode.nodeName);
	$("#vType").val("自编组");
	$("#vCustomer").val(functionNode.workUnitName);
}
function addVehicleGroup(NodeId){
	
	$("#addVehicleGroupType").val(functionNode.nodeName);
	$("#addTheirCustomer").val(functionNode.workUnitName);
	$("#addGroupForm").css("display", "block");
	$("#addGroupForm").dialog( {
		width : 680,
		height : 440,
		modal:true,
		title : '新建车辆组'		
	});
	addOption("allVehicle");
}

function updateVehicleGroup(NodeId){
	
	$("#updateVehicleName").val(functionNode.nodeName);
	$("#updateTheirCustomer").val(functionNode.workUnitName);
	$("#updateGroupForm").css("display", "block");
	$("#updateGroupForm").dialog( {
		width : 680,
		height : 440,
		modal:true,
		title : '编辑车辆组'		
	});
	updateOption("updateAllVehicle");
}

function addOption(SELECTID){
	$.ajax({
	    type : "POST",
	    url : "sys/getVehicleList.action",
		data : {
			nodeId:functionNode.id
		},
	    dataType : "JSON",
	    success : function(data) {
	    	if(data.code == '0'){
	    		var options = '';
	    		for(i=0; i<data.data.length; i++)
	    		{
	    		options +=  "<option value='"+data.data[i].id+"'>"+data.data[i].registrationNo+"</option>";
	    		}
	    		$('#'+SELECTID).html(options);
	    	}else{
	    		showError();
	    	}
	    },
	    error : function(data) {
	    	showError();
	    }
    });	
}
 
function updateOption(SELECTID){
	var hasSelectedVehicle = null;
	$.ajax({
	    type : "POST",
	    url : "sys/getSelectedVehicle.action",
		data : {
			id:functionNode.id
		},
	    dataType : "JSON",
	    success : function(data) {
	    	if(data.code == '0'){
	    		hasSelectedVehicle = data;
	    		var options = '';
	    		for(i=0; i<data.data.length; i++)
	    		{
	    		options +=  "<option value='"+data.data[i].id+"'>"+data.data[i].registrationNo+"</option>";
	    		}
	    		$('#updateSelectVehicle').html(options);
	    		$.ajax({
	    		    type : "POST",
	    		    url : "sys/getVehicleList.action",
	    			data : {
	    				nodeId:functionNode.id
	    			},
	    		    dataType : "JSON",
	    		    success : function(data) {
	    		    	if(data.code == '0'){
	    		    		var options = '';
	    		    		if(hasSelectedVehicle!=null){
	    			    			for(i=0; i<data.data.length; i++){
	    			    				var flag = false;
	    			    				for(j=i;j<hasSelectedVehicle.data.leng;j++){
		    			    				if(hasSelectedVehicle.data[j].id==data.data[i].id){
		    			    					flag = true;
		    			    				}
	    			    				}
	    			    				if(!flag){
	    			    					options +=  "<option value='"+data.data[i].id+"'>"+data.data[i].registrationNo+"</option>";
	    			    				}
	    			    				flag = false;
	    		    			}
	    		    		}else{
	    		    			for(i=0; i<data.data.length; i++){
	    		    				options +=  "<option value='"+data.data[i].id+"'>"+data.data[i].registrationNo+"</option>";
	    			    		}
	    		    		}	    		
	    		    		$('#'+SELECTID).html(options);
	    		    	}else{
	    		    		showError();
	    		    	}
	    		    },
	    		    error : function(data) {
	    		    	showError();
	    		    }
	    	    });	
	    	}else{
	    		showError();
	    	}
	    },
	    error : function(data) {
	    	showError();
	    }
    });	
	
}
/**
 * 设置选中主功能菜单时的样式
 * 
 * @param {}
 *            flag 是否选中标志. 选中为true, 否则为false
 */
function setSelectedMainFunction(flag) {
	if (flag) {
		$("#mainFunction").css("color", "#FFFFFF");
		$("#mainFunction").css("backgroundColor", "#000080");
	} else {
		$("#mainFunction").css("color", "#000000");
		$("#mainFunction").css("backgroundColor", "#FFFFFF");
	}
}
/**
 * 顶级菜单下拉框架改变时设置按钮状态
 * 
 * @param {}
 *            nodeId
 */
function disabledButtonsByNodeId(nodeId) {
	setDisabled(buttonIds1, true);
	// 设置添加顶级功能按钮状态
	if (nodeId == CONST.ROOT_NODE_ID)
		setDisabled( [ "addTopFuncBut" ], false);
	else
		setDisabled( [ "addTopFuncBut" ], true);
}

/**
 * 选中节点时设置按钮状态
 */
function setButtonSelectState1() {
	setDisabled( [ "insertBut" ], false);
	setDisabled( [ "saveBut", "modifyBut", "deleteBut", "cancelBut" ], true);
}

/**
 * 选中节点时设置按钮状态
 */
function setButtonSelectState2() {
	setDisabled( [ "insertBut", "modifyBut", "deleteBut" ], false);
	setDisabled( [ "saveBut", "cancelBut" ], true);
}

/**
 * 选中节点时设置按钮状态
 */
function setButtonSelectState() {
	// 如果选中主功能菜单
	if (menuType == CONST.MENU_TYPE.MAIN_FUNCTION) {
		setButtonSelectState1();
	} else {
		setButtonSelectState2();
	}
}

/**
 * 点击插入按钮时设置按钮状态
 */
function setButtonInsertState() {
	setDisabled( [ "insertBut", "modifyBut", "deleteBut", "addTopFuncBut" ],true);
	setDisabled( [ "saveBut", "cancelBut" ], false);
}
/**
 * 初始化按钮事件
 */
function initButtonEvents() {
	//新增按钮事件
	$("#insertBut").click(function() {
		addVehicleGroup(functionNode.id);
	});
	$("#modifyBut").click(function() {
		updateVehicleGroup(functionNode.id);
	});
	$("#saveBut").click(function() {
		
	});
}


/**
 * 设置表单元素可不可用
 */
function setDisabled(eleIds, flag) {
	$.each(eleIds, function(i, n) {
		$("#" + n).attr("disabled", flag);
	});
}
function showVehicle() {
    $("#tbVehicle").flexigrid( {
		url : 'sys/getVehicleByGroupId.action',
		dataType : 'json',
		colModel : [ 
		{
			display : '车牌号',
			name : 'RegistrationNO',
			height:20,
			width : 150,
			sortable : true,
			align : 'left'
		}],		
		sortname : "id",//第一次加载数据时排序列
		sortorder : "asc",//第一次加载数据时排序类型
		usepager : true,//是否分页，默认为true。
		showTableToggleBtn : true,//是否显示收起/打开按钮,默认不显示。
		useRp : false,//是否可以动态设置每页显示的结果数，默认为false。
		rp : 5,//每页记录数，默认为10
		checkbox : false,//是否要多选框,默认为false。
		rowId : 'id',// 多选框绑定行的id,只有checkbox : true时才有效。
		singleSelect:false,
		width : 'auto',//表格宽度
		height : 190//表格高度
	});
    
}

$(function() {		
	initTree();
	initButtonEvents();
});


/**
 * 查询方法
 */
function toSearch(KIND){
	var params = null;
	if(KIND==1){
		params = [ {
			name : 'workUnitId',
			value : '-9999'
		}];
	}
	if(KIND==0){
		params = [ {
			name : 'workUnitId',
			value : functionNode.workId
		}];
	}else{
		params = [ {
			name : 'groupId',
			value : functionNode.id
		}];
	}
	gridReload(params);	
}

function gridReload(params){
	$("#tbVehicle").flexOptions({
		newp : 1,// 设置起始页
		params : params// 设置查询参数
	}).flexReload();// 重新加载
}

/**
 * 新增加方法入口
 */
function toCreate(){
	$("#submitBtn").unbind("click");
	clearForm("editWindow");
	initAreaCustom("parentArea");
	showEditForm();
	$('#submitBtn').bind('click', doCreate);
}

/**
 * 执行后台方法新增数据
 */
function doCreate(){
	var canSubmit = $("#editWindow").beforeSubmit();
	if(canSubmit){
		var name = $("#areaName").val();
		var code = $("#areaCode").val();
		var parentId = $("#parentArea").val();
		
		$.ajax({
		    type : "POST",
		    url : "sys/createArea.action",
			data : {
				name : name,
				code : code,
				parentId : parentId
			},
		    dataType : "JSON",
		    success : function(data) {
		    	if(data.code == '0'){
		    		hide();
		    		$("#areaList").flexReload();
		    	}else{
		    		showError();
		    	}
		    },
		    error : function(data) {
		    	showError();
		    }
	    });
	}
	
}

/**
 * 编辑方法入口
 */
function toEdit(){
	var checkedIds = $("#areaList").getCheckedRows();
	if(checkedIds.length<1){
		showWarning("请选择一行后进行编辑操作！");
		return;
	}
	if(checkedIds.length>1){
		showWarning("只能选择一行进行编辑操作！");
		return;
	}
	if(checkedIds.length == 1){
		doEdit(checkedIds[0]);
	}
}

/**
 * 查询机构类别信息显示在编辑窗口
 * @param id
 */
function doEdit(id){
	if(id != null && id != ''){
		
		clearForm("editWindow");
		initAreaCustom("parentArea");
		showEditForm();
		$("#submitBtn").unbind("click");
		
		$.ajax({
		    type : "POST",
		    url : "sys/getAreaById.action",
		    data : {id:id},
		    dataType : "JSON",
		    success : function(data) {
		    	if(data.code == '0'){
		    		var otInfo = data.data;
		    		if(otInfo.length > 0){
		    			$("#areaId").val(otInfo[0].id);
		    			$("#areaName").val(otInfo[0].name);
		    			$("#areaCode").val(otInfo[0].code);
		    			$("#parentArea option[value='" + otInfo[0].parentId + "']").attr("selected", true);
		    			$("#submitBtn").bind('click', doUpdate);
		    		}
		    	}else{
		    		showError();
		    	}
		    },
		    error : function(data) {
		    	showError();
		    }
	    });
	}
}

/**
 * 执行后台方法更新数据
 */
function doUpdate(){
	var canSubmit = $("#editWindow").beforeSubmit();
	if(canSubmit){
		var id = $("#areaId").val();
		var name = $("#areaName").val();
		var code = $("#areaCode").val();
		var parentId = $("#parentArea").val();
		$.ajax({
		    type : "POST",
		    url : "sys/updateArea.action",
			data : {
				id : id,
				name : name,
				code : code,
				parentId : parentId
			},
		    dataType : "JSON",
		    success : function(data) {
		    	if(data.code == '0'){
		    		hide();
		    		$("#areaList").flexReload();
		    	}else{
		    		showError();
		    	}
		    },
		    error : function(data) {
		    	showError();
		    }
	    });
	}
}

/**
 * 打开编辑窗口
 */
function showEditForm(){
	show();
	$("#editWindow .errorMsg").closeMessage();
}

/**
 * 显示错误信息
 */
function showError(){
	showWarning('服务器忙，请重试！');
}

/**
 * 显示提示信息
 */
function showWarning(str){
	$.messager.alert('提示信息',str,'info');
}

/**
 * 删除方法入口
 */
function toDelete(){
	var checkedIds = $("#areaList").getCheckedRows();
	if(checkedIds.length<1){
		showWarning("请选择一行后进行删除操作！");
		return;
	}
	doDelete(checkedIds);
} 

 

/**
 * 检查要删除的区域是否存在存在下级区域
 * @param ids
 * @returns {Boolean}
 */
function canDelete(ids){
	
	var isDelete = false;
	
	$.ajax({
	    type : "POST",
	    async : false,
	    url : "sys/getAreasCountByParentIds.action",
	    data : {ids:ids.toString()},
	    dataType : "JSON",
	    success : function(data) {
	    	if(data.code == '0'){
	    		var cnt = data.data[0].nextCount;
	    		if(cnt != null && cnt == 0){
	    			isDelete = true;
	    		}
	    		if(cnt != null && cnt > 0){
	    			showWarning("请先删除下级区域后!");
	    		}
	    	}else{
	    		showError();
	    	}
	    },
	    error : function(data) {
	    	showError();
	    }
    });
	return isDelete;		
}

//打开一个对话框
function openDialog(id, widthValue, heightValue, titleValue) {
	$("#" + id).css("display", "block");
	$("#" + id).dialog( {
		width : widthValue,
		height : heightValue,
		title : titleValue,
		maximizable : true
	});
}
 