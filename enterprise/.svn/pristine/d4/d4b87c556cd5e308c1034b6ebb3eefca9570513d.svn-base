/**
 * UserServices.java
 * Create on 2012-2-10下午02:43:49
 * Copyright (c) 2012 by e_trans.
 */
package com.etrans.bubiao.services.sys;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.etrans.bubiao.entities.User;
import com.etrans.bubiao.services.IbatisServices;

/**
 * 用户信息管理Services
 * 
 * @author Ivan
 * @version 1.0
 */
@Service
public class UserServices {

	@Autowired
	private IbatisServices ibatisServices;

	/**
	 * setIbatisServices
	 * 
	 * @param ibatisServices
	 */
	public void setIbatisServices(IbatisServices ibatisServices) {
		this.ibatisServices = ibatisServices;
	}

	/**
	 * 编辑用户信息
	 * 
	 * @throws Exception
	 */
	public void editUser(Map<String, Object> param) throws Exception {
		this.ibatisServices.updateIbatisObject("Pub_User", param);
	}

	/**
	 * 验证名称是否存在
	 * 
	 * @param whereMap
	 * @return
	 * @throws Exception
	 */
	public HashMap getPubUserByName(Map<String, Object> paramMap) throws Exception {
		return this.ibatisServices.queryForObject(HashMap.class, "getPubUserByNameSQL", paramMap );
	}

	/**
	 * 获取权限列表
	 * 
	 * @param statementId
	 * @param paramMap
	 * @param random
	 * @return
	 */
	public List<Map> getRolesForList(String statementId,HashMap paramMap,long random){
		paramMap.put("nouseId", random);
		return this.ibatisServices.queryForList(HashMap.class,statementId,paramMap);
	}
	/**
	 * 根据用户名称模糊查询某用户的子用户信息
	 * 
	 * @param userId
	 * @param userName
	 * @return JSON格式的 用户信息结果集
	 * @throws Exception
	 */
	public List findUsers(Map<String,Object> param,long random) throws Exception {		
		return this.ibatisServices.queryForList(HashMap.class,"findUsers", param);
	}

	/**
	 * 根据用户ID查找用户
	 * 
	 * @param id
	 * @return User
	 * @throws Exception
	 */
	public User findUserById(String id)throws Exception{
		return ibatisServices.queryForObject(User.class, "findUserByIdSQL", id);
	}
	
	/**
	 * 修改用户密码
	 * 
	 * @param param
	 * @throws Exception
	 */
	public void updatePassword(Map<String,Object> param)throws Exception{
		this.ibatisServices.updateIbatisObject("passwordUpdateSql", param);
	}
	
	/**
	 * 更新企业管理员
	 * 1、获取原企业管理员
	 * 2、更新企业管理员ID，同步更新用户超级管理员字段
	 * @param userId
	 * @throws Exception 
	 */
	public Integer updateWorkUnitAdminId(Long userId,Long workUnitId) throws Exception{
		HashMap<String,Object> map = new HashMap<String, Object>();
		Integer oldUserAdminId = 0;
		map.put("userId", userId);
		map.put("id", workUnitId);
		HashMap<String,Object> valueMap = ibatisServices.queryForObject(HashMap.class, "getWorkUnitByIdSQL", map);
		if(valueMap!=null){
			if(valueMap.get("AdminUserID")!=null)oldUserAdminId = (Integer)valueMap.get("AdminUserID");
			ibatisServices.updateIbatisObject("updateWorkUnitAdminId", map);
		}else{
			throw new Exception("没有查询到所属企业!请核对企业编号是否存在!企业编号:"+workUnitId);
		}
		return oldUserAdminId;
	}
	
	/**
	 * 更新用户超级管理员标志
	 * 
	 * @param userId
	 * @param isSuper
	 * @return effectRow
	 */
	public int updateUserIsSuper(long userId,int isSuper){
		HashMap<String,Object> map = new HashMap<String, Object>();
		map.put("userId", userId);
		map.put("IsSuperUser", isSuper);
		return ibatisServices.updateIbatisObject("updateUserIsSuperUser", map);
	}

}
