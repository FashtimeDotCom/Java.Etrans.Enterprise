/**
 * VehicleAction.java
 * Create on 2012-4-25 13:37:52
 * Copyright (c) 2012 by e_trans.
 */
package com.etrans.bubiao.action.sys;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.etrans.bubiao.action.BaseAction;
import com.etrans.bubiao.action.sys.log.LogActionTypes;
import com.etrans.bubiao.action.sys.log.LogUtil;
import com.etrans.bubiao.auth.SessionUser;
import com.etrans.bubiao.entities.Result;
import com.etrans.bubiao.services.sys.VehicleServices;
import com.etrans.bubiao.sys.UserContext;
import com.etrans.common.util.FlexiGridUtil;
import com.etrans.common.util.json.JSONUtil;
import com.etrans.common.util.web.Struts2Utils;


@Controller
@Scope("prototype")
@Namespace("/sys")
public class VehicleAction extends BaseAction {

	private static final long serialVersionUID = 1L;
	
	@Autowired
	private VehicleServices vehicleServices;

	public VehicleServices getVehicleServices() {
		return vehicleServices;
	}

	public void setVehicleServices(VehicleServices vehicleServices) {
		this.vehicleServices = vehicleServices;
	}

	/**
	 * 车辆分页多条件查询
	 */
	@Action(value = "vehicleList")
	public void vehicleList() {
		
		try {
			Map<String,Object> params = FlexiGridUtil.parseParam(this.getGridParams());
			
			SessionUser user = UserContext.getLoginUser();
			if(user != null){
				if(UserContext.isBsRootUser()){
					params.put("isSuper", true);
				}else if(user.isWorkUnitSuperAdmin()){
					String fullId = user.getWorkUnitFullId();
					params.put("fullId", fullId);
					params.put("isWorkUnitSuperAdmin", true);
				}else{
					params.put("userId", user.getUserID());
				}
			 }
			
			this.renderJSON(JSONUtil.toJson(vehicleServices.getVehicles(params)));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * 导出车辆列表到EXCEL
	 */
	@Action(value = "vehicleExport")
	public void vehicleExport() {
		
		Map<String,Object> params = FlexiGridUtil.parseParam(this.getGridParams());
		params = this.getExportParams(params);
		SessionUser user = UserContext.getLoginUser();
		if(user != null){
			if(UserContext.isBsRootUser()){
				params.put("isSuper", true);
			}else if(user.isWorkUnitSuperAdmin()){
				String fullId = user.getWorkUnitFullId();
				params.put("fullId", fullId);
				params.put("isWorkUnitSuperAdmin", true);
			}else{
				params.put("userId", user.getUserID());
			}
		 }
		try {
			
			String[] titleArray = {};
			titleArray = new String[16];
			titleArray[0]="车牌号码";
			titleArray[1]="车牌颜色";
			titleArray[2]="车辆分类";
			titleArray[3]="车辆类型";
			titleArray[4]="行业类型";
			titleArray[5]="平台名称";
			titleArray[6]="终端类型";
			titleArray[7]="企业名称";
			titleArray[8]="所属车队";
			titleArray[9]="第一司机";
			titleArray[10]="车辆颜色";
			titleArray[11]="道路运输证号";
			titleArray[12]="通信号";
			titleArray[13]="SIM卡号";
			titleArray[14]="使用状态";
			titleArray[15]="盲区处理";
			
			String[] columnArray = {};
			columnArray = new String[16];
			columnArray[0]="registrationNo";
			columnArray[1]="noColor";
			columnArray[2]="customerTrade";
			columnArray[3]="kindName";
			columnArray[4]="tradeName";
			columnArray[5]="platformName";
			columnArray[6]="terminalTypeName";
			columnArray[7]="workUnitName";
			columnArray[8]="vehicleTeamName";
			columnArray[9]="firstDriver";
			columnArray[10]="vColor";
			columnArray[11]="transportPermits";
			columnArray[12]="commNo";
			columnArray[13]="simNo";
			columnArray[14]="workStatusStr";
			columnArray[15]="isBlindStr";
			
			List<Map<String,Object>> rows = vehicleServices.getVehicleList(params);
			exportExl("vehicleList", titleArray, columnArray, rows);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 车牌唯一验证
	 */
	@Action(value = "checkRegistrationNo")
	public void checkRegistrationNo() {
		
		String name = getParameter("name"); 
		String id = getParameter("id"); 
		
		Map<String,Object> whereMap = new HashMap<String,Object>();
		whereMap.put("name", name);
		whereMap.put("id", id);
		
		try {
			this.renderJSON(JSONUtil.toJson(vehicleServices.checkRegistrationNO(whereMap)));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	
	/**
	 * 车辆新增
	 */
	@SuppressWarnings("unchecked")
	@Action(value = "createVehicle")
	public void createVehicle() {
		
		String jsonParams = getParameter("params"); 
		Map<String, Object> params = JSONUtil.fromJson(jsonParams, Map.class);
		params = putUserParams(params);
		Result result = new Result();
		try {
			vehicleServices.createVehicle(params);
			result.setCode(1);
			this.renderJSON(JSONUtil.toJson(result));
			LogUtil.insertLog(LogActionTypes.INSERT, "新增", "车辆管理", "", "新增车辆信息");
		} catch (Exception e) {
			e.printStackTrace();
		}
		result.setCode(0);
		this.renderJSON(JSONUtil.toJson(result));
		
	}
	
	
	/**
	 * 查询车辆详细信息
	 */
	@Action(value = "getVehicleById")
	public void getVehicleById() {
		
		String id = getParameter("id"); 
		Map<String, Object> params = new HashMap<String,Object>();
		params.put("vehicleId", id);
		
		Result result = new Result();
		try {
			Map<String,Object> vehicle = vehicleServices.getVehicleById(params);
			result.setCode(1);
			result.setData(vehicle);
			this.renderJSON(JSONUtil.toJson(result));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		result.setCode(0);
		this.renderJSON(JSONUtil.toJson(result));
	}
	
	
	/**
	 * 车辆修改
	 */
	@SuppressWarnings("unchecked")
	@Action(value = "updateVehicle")
	public void updateVehicle() {
		
		String jsonParams = getParameter("params"); 
		Map<String, Object> params = JSONUtil.fromJson(jsonParams, Map.class);
		params = putUserParams(params);
		
		Result result = new Result();
		try {
			vehicleServices.updateVehicle(params);
			result.setCode(1);
			this.renderJSON(JSONUtil.toJson(result));
			LogUtil.insertLog(LogActionTypes.UPDATE, "修改", "车辆管理", "", "编辑车辆信息");

		} catch (Exception e) {
			e.printStackTrace();
		}
		result.setCode(0);
		this.renderJSON(JSONUtil.toJson(result));
	}
	
	
	/**
	 * 车辆删除
	 */
	@Action(value = "deleteVehicle")
	public void deleteVehicle() {
		
		String id = getParameter("id"); 
		Map<String, Object> params = new HashMap<String,Object>();
		params.put("vehicleId", id);
		params = putUserParams(params);
		
		Result result = new Result();
		try {
			vehicleServices.deleteVehicle(params);
			result.setCode(1);
			this.renderJSON(JSONUtil.toJson(result));
			LogUtil.insertLog(LogActionTypes.DELETE, "删除", "车辆管理", "", "删除车辆信息");

		} catch (Exception e) {
			e.printStackTrace();
		}
		result.setCode(0);
		this.renderJSON(JSONUtil.toJson(result));
	}
	
	/**
	 * 暂停车辆
	 */
	@Action(value = "pauseVehicle")
	public void pauseVehicle() {
		
		String id = getParameter("id");
		String workStatus = getParameter("workStatus");
		Map<String, Object> params = new HashMap<String,Object>();
		params.put("vehicleId", id);
		params.put("workStatus", workStatus);
		params = putUserParams(params);
		
		Result result = new Result();
		try {
			vehicleServices.updateVehicleWorkStatus(params);
			result.setCode(1);
			this.renderJSON(JSONUtil.toJson(result));
		} catch (Exception e) {
			e.printStackTrace();
		}
		result.setCode(0);
		this.renderJSON(JSONUtil.toJson(result));
	}
	
	/**
	 * 启用车辆
	 */
	@Action(value = "restartVehicle")
	public void restartVehicle() {
		
		String id = getParameter("id");
		String workStatus = getParameter("workStatus");
		Map<String, Object> params = new HashMap<String,Object>();
		params.put("vehicleId", id);
		params.put("workStatus", workStatus);
		params = putUserParams(params);
		
		Result result = new Result();
		try {
			vehicleServices.updateVehicleWorkStatus(params);
			result.setCode(1);
			this.renderJSON(JSONUtil.toJson(result));
		} catch (Exception e) {
			e.printStackTrace();
		}
		result.setCode(0);
		this.renderJSON(JSONUtil.toJson(result));
	}
	
	/**
	 * 车辆更新使用状态
	 */
	@Action(value = "updateVehicleWorkStatus")
	public void updateVehicleWorkStatus() {
		
		String id = getParameter("id");
		String workStatus = getParameter("workStatus");
		Map<String, Object> params = new HashMap<String,Object>();
		params.put("vehicleId", id);
		params.put("workStatus", workStatus);
		params = putUserParams(params);
		
		Result result = new Result();
		try {
			vehicleServices.updateVehicleWorkStatus(params);
			result.setCode(1);
			this.renderJSON(JSONUtil.toJson(result));
		} catch (Exception e) {
			e.printStackTrace();
		}
		result.setCode(0);
		this.renderJSON(JSONUtil.toJson(result));
	}
	
	
	/**
	 * 车辆更换终端
	 */
	@Action(value = "changeTerminal")
	public void changeTerminal() {
		
		String vehicleId = getParameter("vehicleId");
		String oldTerminalId = getParameter("oldTerminalId");
		String newTerminalId = getParameter("newTerminalId");
		Map<String, Object> params = new HashMap<String,Object>();
		params.put("vehicleId", vehicleId);
		params.put("oldTerminalId", oldTerminalId);
		params.put("newTerminalId", newTerminalId);
		params = putUserParams(params);
		
		Result result = new Result();
		try {
			vehicleServices.updateTerminal(params);
			result.setCode(1);
			this.renderJSON(JSONUtil.toJson(result));
		} catch (Exception e) {
			e.printStackTrace();
		}
		result.setCode(0);
		this.renderJSON(JSONUtil.toJson(result));
	}
	
	/**
	 * 终端参数分页查询
	 */
	@Action(value = "terminalParamList")
	public void terminalParamList() {
		
		try {
			Map<String,Object> params = FlexiGridUtil.parseParam(this.getGridParams());
			this.renderJSON(JSONUtil.toJson(vehicleServices.getTerminalParams(params)));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * 获取用户信息
	 * @param params
	 * @return
	 */
	public Map<String,Object> putUserParams(Map<String,Object> params) {
		
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));
		Date date = calendar.getTime();
		
		Long userId = UserContext.isSuperUser() ? 0 : UserContext.getLoginUserID();
		
		params.put("createUserId", userId);
		params.put("modifyUserId", userId);
		params.put("createDateTime", format.format(date));
		params.put("modifyDateTime", format.format(date));
		
		return params;
	}
	
	
	
	
	
	
	
	
	
	
//////////////////////作用于报警设置模块begin/////////////////////////////	
	
	/**
	 * 根据用户id（单位id）得到车辆列表
	 */
	@SuppressWarnings("unchecked")
	@Action(value = "getVehilceListByWorkUnitID")
	public void getVehilceListByWorkUnitID() {
		
		StringBuilder jsonString = new StringBuilder();
		try {
			//车牌号
			String registrationNO = getParameter("registrationNO").trim();
			//取得企业ID（工作单位）
			long workUnitID=UserContext.getLoginUser().getWorkUnitID();
			Map<String, Object> paramsMap = new HashMap<String, Object>();
			paramsMap.put("registrationNO", registrationNO);
			//不是超级管理员!UserContext.isBsRootUser()
			if(!UserContext.isBsRootUser()){
				paramsMap.put("workUnitID", workUnitID);
			}
			
			List<HashMap<String, String>> vehilceList=vehicleServices.getVehilceListByWorkUnitID(paramsMap);
			 
			for (Map vehilceMap : vehilceList) {
				jsonString.append(vehilceMap.get("id") + "=" + vehilceMap.get("registrationNO") + ",");
			}
			Struts2Utils.renderText(jsonString.toString());
//			LogUtil.insertLog(LogActionTypes.READ, "查询", "业务管理", "", "查询车辆信息");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
		
//////////////////////作用于报警设置模块end/////////////////////////////	

}
