package com.etrans.bubiao.sys;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.catalina.CometEvent;
import org.apache.catalina.CometProcessor;
import org.springframework.beans.factory.annotation.Autowired;

import com.etrans.bubiao.services.monitorCenter.MonitorCenterServices;

public class TrackPlayBackServlet extends HttpServlet implements CometProcessor  {
	private MonitorCenterServices monitorCenterServices=new MonitorCenterServices();
	
	private static final long serialVersionUID = 1L;
	private List<String> list;
    private int listSize=0;
	private int listIndex=-1;
	private int num=20;//每次返回条数
	private boolean isEnd=false;
	private boolean isLast=false;
	  
    @SuppressWarnings("unchecked")
	public void event(CometEvent event) throws IOException{
        /*
         * event方法用来处理各种请求，可以根据状态的不同得到各种响应
         * 同时可以不断根据自己的需求像客户端发送信息
         */
        HttpServletResponse resp = event.getHttpServletResponse();
        HttpServletRequest req = event.getHttpServletRequest();
        String beginTime=req.getParameter("beginTime");
        String endTime=req.getParameter("endTime");
        String vehicleId=req.getParameter("vehicleId");
        String mapType = req.getParameter("mapType");
        HttpSession session= req.getSession(false);
        
		Map<String, String> vehicleMap=(HashMap<String, String>)session.getAttribute(Constants.USER_VEHICLE);
        try {
        	if (list==null){
        		list=this.monitorCenterServices.findPlayBackTrack(vehicleId, Long.valueOf(beginTime), Long.valueOf(endTime),vehicleMap,mapType);
        		listSize=list.size();
        	}
        } catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
        
        List<String> reponseList=new ArrayList();
        
        if (!isLast){
	        if (listSize>num){
	        	if ((listIndex+20)>=listSize){
	        		 reponseList=list.subList(listIndex+1, listSize);
	        		 isLast=true;
	        	}
	        	else{
	        		reponseList=list.subList(listIndex+1, listIndex+num);
	        	}
	        	 listIndex+=num;
	        }
	        else{
	        	reponseList=list;
	        	isLast=true;
	        }
        }
        else{
        	isEnd=true;
        }
       
        
        //对于event而言，会存在多种状态，在begin的时候可以开始获取数据
        if(event.getEventType()==CometEvent.EventType.BEGIN) {
            System.out.println(req.getSession().getId());
            //在begin的状态进行数据写操作
            new Thread(new TrackPlayBackThread(resp,reponseList,isEnd)).start();
        } else if(event.getEventType()==CometEvent.EventType.END) {
            //请求结束的时候执行
            event.close();
        } else if(event.getEventType()==CometEvent.EventType.ERROR) {
            //发送错误的时候处理
            event.close();
        } else if(event.getEventType()==CometEvent.EventType.READ) {
            //还正读取数据的状态
            throw new RuntimeException("该状态无法进行操作");
        }
    }
  
    @Override
    public void init() throws ServletException {
        super.init();
    }
    
    @Override
    public void destroy() {
    	list=null;
        listSize=0;
    	listIndex=-1;
    	isEnd=false;
        isLast=false;

    }
}
